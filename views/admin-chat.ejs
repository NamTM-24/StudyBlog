<!DOCTYPE html>
<html lang="vi">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/output.css" />
    <link rel="stylesheet" href="/css/chat-widget.css" />
    <title>Admin Chat - StudyBlog</title>

    <!-- Socket.IO Client -->
    <script src="/socket.io/socket.io.js"></script>

    <script>
      tailwind.config = {
        darkMode: "class",
        theme: {
          extend: {
            colors: {
              brand: {
                50: "#eef2ff",
                100: "#e0e7ff",
                200: "#c7d2fe",
                300: "#a5b4fc",
                400: "#818cf8",
                500: "#6366f1",
                600: "#4f46e5",
                700: "#4338ca",
                800: "#3730a3",
                900: "#312e81",
              },
            },
          },
        },
      };
    </script>
  </head>

  <body
    class="h-full bg-gradient-to-br from-slate-50 via-white to-slate-100 dark:from-slate-950 dark:via-slate-950 dark:to-slate-900 text-slate-800 dark:text-slate-100"
  >
    <!-- Header -->
    <header
      class="bg-white dark:bg-slate-900 shadow-sm border-b border-slate-200 dark:border-slate-800"
    >
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center py-4">
          <div class="flex items-center space-x-4">
            <a
              href="/admin"
              class="text-2xl font-bold text-brand-600 dark:text-brand-400"
            >
              ← Quay lại Admin
            </a>
            <h1 class="text-xl font-semibold">Admin Chat System</h1>
          </div>
          <div class="flex items-center space-x-4">
            <div class="flex items-center space-x-2">
              <div
                class="w-3 h-3 bg-green-500 rounded-full animate-pulse"
              ></div>
              <span class="text-sm text-green-600 dark:text-green-400"
                >Online</span
              >
            </div>
            <div class="flex items-center space-x-2">
              <span class="text-sm text-gray-600 dark:text-gray-400"
                >Admin:</span
              >
              <span class="font-medium"><%= user?.name || 'Admin' %></span>
            </div>
          </div>
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Online Users -->
        <div class="lg:col-span-1">
          <div
            class="bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700"
          >
            <div class="p-4 border-b border-slate-200 dark:border-slate-700">
              <h2 class="text-lg font-semibold">Người dùng online</h2>
              <p
                class="text-sm text-gray-600 dark:text-gray-400"
                id="online-count"
              >
                0 người dùng
              </p>
            </div>
            <div class="p-4">
              <div id="online-users" class="space-y-3">
                <!-- Online users will be listed here -->
              </div>
            </div>
          </div>

          <!-- Quick Responses -->
          <div
            class="bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 mt-6"
          >
            <div class="p-4 border-b border-slate-200 dark:border-slate-700">
              <h2 class="text-lg font-semibold">Phản hồi nhanh</h2>
            </div>
            <div class="p-4">
              <div class="space-y-2">
                <button
                  class="quick-response-btn w-full text-left p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-slate-700 transition-colors"
                  data-response="Xin chào! Tôi có thể giúp bạn như thế nào?"
                >
                  Xin chào! Tôi có thể giúp bạn như thế nào?
                </button>
                <button
                  class="quick-response-btn w-full text-left p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-slate-700 transition-colors"
                  data-response="Cảm ơn bạn đã liên hệ. Chúng tôi sẽ phản hồi sớm nhất có thể."
                >
                  Cảm ơn bạn đã liên hệ. Chúng tôi sẽ phản hồi sớm nhất có thể.
                </button>
                <button
                  class="quick-response-btn w-full text-left p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-slate-700 transition-colors"
                  data-response="Bạn có thể cho tôi biết thêm chi tiết về vấn đề này không?"
                >
                  Bạn có thể cho tôi biết thêm chi tiết về vấn đề này không?
                </button>
                <button
                  class="quick-response-btn w-full text-left p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-slate-700 transition-colors"
                  data-response="Tôi hiểu vấn đề của bạn. Hãy để tôi kiểm tra và phản hồi trong giây lát."
                >
                  Tôi hiểu vấn đề của bạn. Hãy để tôi kiểm tra và phản hồi trong
                  giây lát.
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Chat Area -->
        <div class="lg:col-span-2">
          <div
            class="bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700 h-[600px] flex flex-col"
          >
            <!-- Chat Header -->
            <div class="p-4 border-b border-slate-200 dark:border-slate-700">
              <div class="flex justify-between items-center">
                <div class="flex items-center space-x-3">
                  <div
                    id="current-user-avatar"
                    class="w-10 h-10 bg-gradient-to-r from-blue-600 to-blue-700 rounded-full flex items-center justify-center"
                  >
                    <svg
                      class="w-5 h-5 text-white"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"
                      ></path>
                    </svg>
                  </div>
                  <div>
                    <h2 class="text-lg font-semibold" id="current-user-name">
                      Chọn người dùng để chat
                    </h2>
                    <p
                      class="text-sm text-gray-600 dark:text-gray-400"
                      id="chat-status"
                    >
                      Chưa có cuộc hội thoại nào
                    </p>
                  </div>
                </div>
                <div class="flex items-center space-x-2">
                  <button
                    id="clear-chat"
                    class="px-3 py-1 text-sm bg-red-100 text-red-600 rounded-lg hover:bg-red-200 transition-colors"
                  >
                    Xóa chat
                  </button>
                </div>
              </div>
            </div>

            <!-- Messages -->
            <div
              id="chat-messages"
              class="flex-1 p-4 overflow-y-auto space-y-4 bg-gray-50 dark:bg-slate-700"
            >
              <!-- Messages will be displayed here -->
            </div>

            <!-- Typing Indicator -->
            <div
              id="typing-indicator"
              class="hidden px-4 py-3 bg-white dark:bg-slate-800 border-t border-slate-200 dark:border-slate-700"
            >
              <div class="flex items-center space-x-2">
                <div class="flex space-x-1">
                  <div
                    class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                  ></div>
                  <div
                    class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                    style="animation-delay: 0.1s"
                  ></div>
                  <div
                    class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                    style="animation-delay: 0.2s"
                  ></div>
                </div>
                <span class="text-sm text-gray-500">Đang nhập tin nhắn...</span>
              </div>
            </div>

            <!-- Input Area -->
            <div
              class="p-4 border-t border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800"
            >
              <div class="flex space-x-3">
                <input
                  id="admin-chat-input"
                  type="text"
                  placeholder="Nhập tin nhắn..."
                  class="flex-1 px-4 py-3 border border-slate-300 dark:border-slate-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-transparent bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100 transition-all duration-200"
                  maxlength="500"
                />
                <button
                  id="admin-send-message"
                  class="bg-gradient-to-r from-brand-600 to-brand-700 hover:from-brand-700 hover:to-brand-800 text-white px-4 py-3 rounded-xl transition-all duration-200 transform hover:scale-105 shadow-lg hover:shadow-xl"
                >
                  <svg
                    class="w-5 h-5"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"
                    ></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      class AdminChat {
         constructor() {
           this.socket = null;
           this.messages = new Map(); // Messages per user
           this.onlineUsers = new Map();
           this.currentUser = <%- JSON.stringify(user) %>;
           this.currentChatRoom = null;

           this.init();
         }

        init() {
          this.connectSocket();
          this.bindEvents();
          this.loadInitialData();
        }

        connectSocket() {
          this.socket = io();
          const token = this.getCookie('accessToken');

          // Join as admin
          this.socket.emit('join-chat', { token });

                     // Listen for messages from socket room
           this.socket.on('chat-message', (message) => {
             console.log('Received chat message from room:', message);
             // Thêm tin nhắn vào chat hiện tại
             this.addMessage(message);
           });

          // Listen for chat history
          this.socket.on('chat-history', (messages) => {
            this.messages = messages;
            this.renderMessages();
          });

          // Listen for user typing
          this.socket.on('user-typing', (data) => {
            this.showTypingIndicator(data);
          });

          // Listen for user online/offline
          this.socket.on('user-online', (data) => {
            this.addOnlineUser(data);
          });

          this.socket.on('user-offline', (data) => {
            this.removeOnlineUser(data);
          });

                                // Listen for new user messages
           this.socket.on('new-user-message', (data) => {
             console.log('Admin received new-user-message:', data);
             this.showNotification(`Tin nhắn mới từ ${data.userName}: ${data.message}`);

             // Tự động thêm tin nhắn vào danh sách nếu chưa có user này
             if (!this.onlineUsers.has(data.userId)) {
               this.addOnlineUser(data);
             }

             // Tự động chuyển đến chat với user này nếu chưa có chat nào đang active
             if (!this.currentChatRoom) {
               console.log('Auto-switching to user chat');
               this.switchToUserChat(data);
             } else {
               // Nếu đã có currentChatRoom, đảm bảo nó đúng với user hiện tại
               const expectedRoomId = `user-${data.userId}`;
               if (this.currentChatRoom !== expectedRoomId) {
                 console.log('Switching to correct user chat room');
                 this.switchToUserChat(data);
               }
             }

             // Tạo tin nhắn object và thêm vào chat
             const userMessage = {
               id: `msg-${Date.now()}-${Math.random()}`,
               userId: data.userId,
               userName: data.userName,
               userAvatar: data.userAvatar,
               message: data.message,
               timestamp: new Date(),
               isAdmin: false,
               isFromNotification: true // Đánh dấu để tránh duplicate
             };
             this.addMessage(userMessage);
           });

        }

        bindEvents() {
          // Send message
          document.getElementById('admin-send-message').addEventListener('click', () => {
            this.sendMessage();
          });

          // Enter key to send
          document.getElementById('admin-chat-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
              this.sendMessage();
            }
          });

          // Quick response buttons
          document.querySelectorAll('.quick-response-btn').forEach(btn => {
            btn.addEventListener('click', () => {
              const response = btn.dataset.response;
              document.getElementById('admin-chat-input').value = response;
              this.sendMessage();
            });
          });

          // Clear chat
          document.getElementById('clear-chat').addEventListener('click', () => {
            if (confirm('Bạn có chắc muốn xóa tất cả tin nhắn?')) {
              this.clearChat();
            }
          });
        }

        loadInitialData() {
          // Load any initial data if needed
        }

                          sendMessage() {
           const input = document.getElementById('admin-chat-input');
           const message = input.value.trim();

           console.log('Admin sendMessage called');
           console.log('Current chat room:', this.currentChatRoom);
           console.log('Socket connected:', !!this.socket);
           console.log('Message:', message);

           if (message && this.socket && this.currentChatRoom) {
             const token = this.getCookie('accessToken');
             // Lấy userId từ currentChatRoom (format: user-{userId})
             const targetUserId = this.currentChatRoom.replace('user-', '');
             console.log('Admin sending message to user:', targetUserId);
             console.log('Current chat room:', this.currentChatRoom);
             console.log('Target user ID:', targetUserId);

             // Gửi tin nhắn với targetUserId
             const messageData = {
               message,
               token,
               targetUserId: targetUserId
             };
             console.log('Sending message data:', messageData);
             this.socket.emit('send-message', messageData);

             // Thêm tin nhắn vào UI ngay lập tức
             const adminMessage = {
               id: `msg-${Date.now()}-${Math.random()}`,
               userId: this.currentUser?.id,
               userName: this.currentUser?.name || 'Admin',
               userAvatar: this.currentUser?.avatar,
               message: message,
               timestamp: new Date(),
               isAdmin: true
             };

             // Thêm tin nhắn vào room hiện tại
             if (!this.messages.has(this.currentChatRoom)) {
               this.messages.set(this.currentChatRoom, []);
             }
             const userMessages = this.messages.get(this.currentChatRoom);
             userMessages.push(adminMessage);
             this.messages.set(this.currentChatRoom, userMessages);

             // Render lại messages
             this.renderMessages();
             this.scrollToBottom();
             input.value = '';
           } else if (!this.currentChatRoom) {
             alert('Vui lòng chọn một người dùng để chat');
             console.log('No current chat room selected');
           } else if (!this.socket) {
             alert('Không thể kết nối đến server');
             console.log('Socket not connected');
           } else if (!message) {
             console.log('Empty message');
           }
         }

                 addMessage(message) {
           // Determine which chat room this message belongs to
           let chatRoomId;
           if (message.isAdmin) {
             // Nếu là tin nhắn từ admin, tìm room dựa trên currentChatRoom
             chatRoomId = this.currentChatRoom;
           } else {
             // Nếu là tin nhắn từ user
             chatRoomId = `user-${message.userId || message.userName}`;
           }

           console.log('Adding message to room:', chatRoomId, 'Current room:', this.currentChatRoom);
           console.log('Message:', message);

           if (!this.messages.has(chatRoomId)) {
             this.messages.set(chatRoomId, []);
           }

           const userMessages = this.messages.get(chatRoomId);
           userMessages.push(message);
           this.messages.set(chatRoomId, userMessages);

           // Only render if we're currently viewing this chat room
           if (this.currentChatRoom === chatRoomId) {
             this.renderMessages();
             this.scrollToBottom();
           } else {
             // Nếu không phải room hiện tại, cập nhật danh sách user online
             this.updateOnlineUsers();

             // Nếu là tin nhắn từ user và chưa có currentChatRoom, tự động chuyển đến
             if (!message.isAdmin && !this.currentChatRoom) {
               const userData = {
                 userId: message.userId,
                 userName: message.userName,
                 userAvatar: message.userAvatar,
                 chatRoomId: chatRoomId
               };
               this.switchToUserChat(userData);
             }
           }
         }

                 renderMessages() {
           const container = document.getElementById('chat-messages');
           container.innerHTML = '';

           if (!this.currentChatRoom) {
             container.innerHTML = `
               <div class="flex items-center justify-center h-full">
                 <div class="text-center">
                   <div class="w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4">
                     <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                       <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                     </svg>
                   </div>
                   <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">Chọn người dùng để bắt đầu chat</h3>
                   <p class="text-gray-500 dark:text-gray-400">Click vào một người dùng trong danh sách bên trái</p>
                 </div>
               </div>
             `;
             return;
           }

           const userMessages = this.messages.get(this.currentChatRoom) || [];
           userMessages.forEach(message => {
             const messageElement = this.createMessageElement(message);
             container.appendChild(messageElement);
           });
         }

                 createMessageElement(message) {
           const messageDiv = document.createElement('div');
           messageDiv.className = 'flex space-x-3';

           if (message.isAdmin) {
             // Admin message (right side)
             messageDiv.innerHTML = `
               <div class="flex-1 max-w-xs ml-auto">
                 <div class="bg-gradient-to-r from-brand-600 to-brand-700 rounded-2xl rounded-tr-md p-4 shadow-sm">
                   <p class="text-sm text-white leading-relaxed">${this.escapeHtml(message.message)}</p>
                 </div>
                 <div class="flex items-center justify-end space-x-2 mt-2">
                   <span class="text-xs text-gray-400">${this.formatTime(message.timestamp)}</span>
                   <span class="text-xs text-gray-400">•</span>
                   <span class="text-xs font-medium text-brand-600">Admin</span>
                 </div>
               </div>
               <div class="flex-shrink-0">
                 <div class="w-10 h-10 bg-gradient-to-r from-brand-600 to-brand-700 rounded-full flex items-center justify-center shadow-lg">
                   <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                     <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                   </svg>
                 </div>
               </div>
             `;
           } else {
             // User message (left side)
             const userAvatar = message.userAvatar || '';
             const userName = message.userName || 'Khách';

             messageDiv.innerHTML = `
               <div class="flex-shrink-0">
                 ${userAvatar ?
                   `<img src="${userAvatar}" alt="${userName}" class="w-10 h-10 rounded-full object-cover shadow-lg border-2 border-white">` :
                   `<div class="w-10 h-10 bg-gradient-to-r from-gray-400 to-gray-500 rounded-full flex items-center justify-center shadow-lg">
                     <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                       <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                     </svg>
                   </div>`
                 }
               </div>
               <div class="flex-1 max-w-xs">
                 <div class="bg-white dark:bg-slate-800 rounded-2xl rounded-tl-md p-4 shadow-sm border border-gray-100 dark:border-slate-700">
                   <p class="text-sm text-gray-800 dark:text-gray-200 leading-relaxed">${this.escapeHtml(message.message)}</p>
                 </div>
                 <div class="flex items-center space-x-2 mt-2">
                   <span class="text-xs font-medium text-gray-600 dark:text-gray-400">${userName}</span>
                   <span class="text-xs text-gray-400">•</span>
                   <span class="text-xs text-gray-400">${this.formatTime(message.timestamp)}</span>
                 </div>
               </div>
             `;
           }

           return messageDiv;
         }

        addOnlineUser(data) {
          this.onlineUsers.set(data.userId || data.userName, data);
          this.updateOnlineUsers();
        }

        removeOnlineUser(data) {
          this.onlineUsers.delete(data.userId || data.userName);
          this.updateOnlineUsers();
        }

                 updateOnlineUsers() {
           const container = document.getElementById('online-users');
           const countElement = document.getElementById('online-count');

           container.innerHTML = '';
           countElement.textContent = `${this.onlineUsers.size} người dùng`;

           this.onlineUsers.forEach((user, key) => {
             const userElement = document.createElement('div');
             userElement.className = 'flex items-center space-x-3 p-3 rounded-xl hover:bg-gray-100 dark:hover:bg-slate-700 cursor-pointer transition-all duration-200';
             userElement.dataset.chatRoom = user.chatRoomId;

             const userAvatar = user.userAvatar || '';

             userElement.innerHTML = `
               <div class="flex-shrink-0">
                 ${userAvatar ?
                   `<img src="${userAvatar}" alt="${user.userName}" class="w-10 h-10 rounded-full object-cover shadow-md">` :
                   `<div class="w-10 h-10 bg-gradient-to-r from-gray-400 to-gray-500 rounded-full flex items-center justify-center shadow-md">
                     <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                       <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                     </svg>
                   </div>`
                 }
               </div>
               <div class="flex-1 min-w-0">
                 <div class="flex items-center space-x-2">
                   <span class="text-sm font-medium text-gray-900 dark:text-gray-100 truncate">${user.userName || 'Khách'}</span>
                   <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                 </div>
                 <p class="text-xs text-gray-500 dark:text-gray-400">Đang online</p>
               </div>
             `;

             // Add click event to switch to user chat
             userElement.addEventListener('click', () => {
               this.switchToUserChat(user);
             });

             container.appendChild(userElement);
           });
         }

        showTypingIndicator(data) {
          const indicator = document.getElementById('typing-indicator');
          indicator.innerHTML = `<span>${data.userName} đang nhập tin nhắn...</span>`;
          indicator.classList.remove('hidden');

          setTimeout(() => {
            this.hideTypingIndicator();
          }, 3000);
        }

        hideTypingIndicator() {
          const indicator = document.getElementById('typing-indicator');
          indicator.classList.add('hidden');
        }

        scrollToBottom() {
          const container = document.getElementById('chat-messages');
          container.scrollTop = container.scrollHeight;
        }

        switchToUserChat(user) {
           // Tạo chatRoomId nếu chưa có - ưu tiên userId
           const chatRoomId = `user-${user.userId || user.userName}`;
           this.currentChatRoom = chatRoomId;

           console.log('Switching to user chat:', user.userName, 'Room ID:', chatRoomId);
           console.log('Current chat room set to:', this.currentChatRoom);
           console.log('User data:', user);

           // Update header
           document.getElementById('current-user-name').textContent = user.userName || 'Khách';
           document.getElementById('chat-status').textContent = 'Đang chat';

           // Update avatar
           const avatarContainer = document.getElementById('current-user-avatar');
           if (user.userAvatar) {
             avatarContainer.innerHTML = `<img src="${user.userAvatar}" alt="${user.userName}" class="w-10 h-10 rounded-full object-cover">`;
           } else {
             avatarContainer.innerHTML = `
               <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
               </svg>
             `;
           }

           // Load messages for this user
           this.renderMessages();
           this.scrollToBottom();

           // Join vào room của user để nhận tin nhắn
           if (this.socket) {
             this.socket.emit('join-user-room', { chatRoomId });
           }
         }

         clearChat() {
           if (this.currentChatRoom) {
             this.messages.set(this.currentChatRoom, []);
             this.renderMessages();
           }
         }

        showNotification(message) {
          // Create notification
          const notification = document.createElement('div');
          notification.className = 'fixed top-4 right-4 bg-brand-600 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full';
          notification.textContent = message;

          document.body.appendChild(notification);

          // Animate in
          setTimeout(() => {
            notification.classList.remove('translate-x-full');
          }, 100);

          // Remove after 5 seconds
          setTimeout(() => {
            notification.classList.add('translate-x-full');
            setTimeout(() => {
              document.body.removeChild(notification);
            }, 300);
          }, 5000);
        }

        formatTime(timestamp) {
          const date = new Date(timestamp);
          return date.toLocaleTimeString('vi-VN', {
            hour: '2-digit',
            minute: '2-digit'
          });
        }

        escapeHtml(text) {
          const div = document.createElement('div');
          div.textContent = text;
          return div.innerHTML;
        }

        getCookie(name) {
          const value = `; ${document.cookie}`;
          const parts = value.split(`; ${name}=`);
          if (parts.length === 2) return parts.pop().split(';').shift();
        }
      }

      // Initialize admin chat when page loads
      document.addEventListener('DOMContentLoaded', () => {
        new AdminChat();
      });
    </script>
  </body>
</html>
