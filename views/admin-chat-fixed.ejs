<!DOCTYPE html>
<html lang="vi">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Chat System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="/socket.io/socket.io.js"></script>
  </head>
  <body class="bg-gray-100 dark:bg-gray-900 min-h-screen">
    <div class="container mx-auto p-4">
      <!-- Header -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 mb-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-3">
            <a href="/admin" class="text-blue-600 hover:text-blue-700">
              <svg
                class="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M10 19l-7-7m0 0l7-7m-7 7h18"
                ></path>
              </svg>
            </a>
            <h1 class="text-2xl font-bold text-gray-900 dark:text-white">
              Admin Chat System
            </h1>
          </div>
          <div class="flex items-center space-x-2">
            <div class="flex items-center space-x-2">
              <div
                class="w-3 h-3 bg-green-500 rounded-full animate-pulse"
              ></div>
              <span class="text-green-600 dark:text-green-400 font-medium"
                >Online</span
              >
            </div>
            <span class="text-gray-600 dark:text-gray-400"
              >Admin: <%= user?.name || 'admin' %></span
            >
          </div>
        </div>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-4 gap-4">
        <!-- Left Sidebar -->
        <div class="lg:col-span-1 space-y-4">
          <!-- Online Users -->
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4">
            <h2
              class="text-lg font-semibold text-gray-900 dark:text-white mb-3"
            >
              Người dùng online
            </h2>
            <div class="text-sm text-gray-600 dark:text-gray-400 mb-2">
              <span id="online-count">0 người dùng</span>
            </div>
            <div id="online-users" class="space-y-2">
              <!-- Users will be added here -->
            </div>
          </div>

          <!-- Quick Replies -->
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4">
            <h2
              class="text-lg font-semibold text-gray-900 dark:text-white mb-3"
            >
              Phản hồi nhanh
            </h2>
            <div class="space-y-2">
              <button
                class="quick-reply-btn w-full text-left p-2 text-sm bg-gray-100 dark:bg-gray-700 rounded hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                data-message="Xin chào! Tôi có thể giúp bạn như thế nào?"
              >
                Xin chào! Tôi có thể giúp bạn như thế nào?
              </button>
              <button
                class="quick-reply-btn w-full text-left p-2 text-sm bg-gray-100 dark:bg-gray-700 rounded hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                data-message="Cảm ơn bạn đã liên hệ. Chúng tôi sẽ phản hồi sớm nhất có thể."
              >
                Cảm ơn bạn đã liên hệ. Chúng tôi sẽ phản hồi sớm nhất có thể.
              </button>
              <button
                class="quick-reply-btn w-full text-left p-2 text-sm bg-gray-100 dark:bg-gray-700 rounded hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                data-message="Bạn có thể cho tôi biết thêm chi tiết về vấn đề này không?"
              >
                Bạn có thể cho tôi biết thêm chi tiết về vấn đề này không?
              </button>
              <button
                class="quick-reply-btn w-full text-left p-2 text-sm bg-gray-100 dark:bg-gray-700 rounded hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                data-message="Tôi hiểu vấn đề của bạn. Hãy để tôi kiểm tra và phản hồi trong giây lát."
              >
                Tôi hiểu vấn đề của bạn. Hãy để tôi kiểm tra và phản hồi trong
                giây lát.
              </button>
            </div>
          </div>
        </div>

        <!-- Chat Area -->
        <div class="lg:col-span-3">
          <div
            class="bg-white dark:bg-gray-800 rounded-lg shadow-lg h-[600px] flex flex-col"
          >
            <!-- Chat Header -->
            <div class="p-4 border-b border-gray-200 dark:border-gray-700">
              <div class="flex justify-between items-center">
                <div class="flex items-center space-x-3">
                  <div
                    id="current-user-avatar"
                    class="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center"
                  >
                    <svg
                      class="w-5 h-5 text-white"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"
                      ></path>
                    </svg>
                  </div>
                  <div>
                    <h2
                      class="text-lg font-semibold text-gray-900 dark:text-white"
                      id="current-user-name"
                    >
                      Chọn người dùng để chat
                    </h2>
                    <p
                      class="text-sm text-gray-600 dark:text-gray-400"
                      id="chat-status"
                    >
                      Chưa có cuộc hội thoại nào
                    </p>
                  </div>
                </div>
                <div class="flex items-center space-x-2">
                  <button
                    id="test-connection"
                    class="px-3 py-1 text-sm bg-blue-100 text-blue-600 rounded-lg hover:bg-blue-200 transition-colors"
                  >
                    Test Connection
                  </button>
                  <button
                    id="clear-chat"
                    class="px-3 py-1 text-sm bg-red-100 text-red-600 rounded-lg hover:bg-red-200 transition-colors"
                  >
                    Xóa chat
                  </button>
                </div>
              </div>
            </div>

            <!-- Messages -->
            <div
              id="chat-messages"
              class="flex-1 p-4 overflow-y-auto space-y-4 bg-gray-50 dark:bg-gray-700"
            >
              <!-- Messages will be displayed here -->
            </div>

            <!-- Typing Indicator -->
            <div
              id="typing-indicator"
              class="hidden px-4 py-3 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700"
            >
              <div class="flex items-center space-x-2">
                <div class="flex space-x-1">
                  <div
                    class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                  ></div>
                  <div
                    class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                    style="animation-delay: 0.1s"
                  ></div>
                  <div
                    class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                    style="animation-delay: 0.2s"
                  ></div>
                </div>
                <span class="text-sm text-gray-500">Đang nhập tin nhắn...</span>
              </div>
            </div>

            <!-- Input Area -->
            <div
              class="p-4 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800"
            >
              <div class="flex space-x-3">
                <input
                  id="admin-chat-input"
                  type="text"
                  placeholder="Nhập tin nhắn..."
                  class="flex-1 px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-all duration-200"
                  maxlength="500"
                />
                <button
                  id="admin-send-message"
                  class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-3 rounded-xl transition-all duration-200 transform hover:scale-105 shadow-lg hover:shadow-xl"
                >
                  <svg
                    class="w-5 h-5"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"
                    ></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      class AdminChat {
        constructor() {
          this.socket = null;
          this.messages = new Map(); // Messages per user
          this.onlineUsers = new Map();
          this.currentUser = <%- JSON.stringify(user) %>;
          this.currentChatRoom = null;
          this.isConnected = false;

          this.init();
        }

        init() {
          console.log('🚀 Initializing Admin Chat...');
          this.connectSocket();
          this.bindEvents();
        }

        connectSocket() {
          this.socket = io();
          const token = this.getCookie('accessToken');

          console.log('🔌 Connecting to socket...');
          console.log('Admin token:', token);
          console.log('Admin user:', this.currentUser);

          this.socket.on('connect', () => {
            console.log('✅ Socket connected');
            this.isConnected = true;

          // Join as admin
          this.socket.emit('join-chat', { token });
            console.log('📡 Admin joined chat');

            // Request list of users with chat history
            this.socket.emit('request-users-with-messages');
            console.log('📡 Requested users with messages');
          });

          this.socket.on('disconnect', () => {
            console.log('❌ Socket disconnected');
            this.isConnected = false;
          });

          // Listen for user online
          this.socket.on('user-online', (data) => {
            console.log('👤 User online:', data);
            this.addOnlineUser(data);
          });

          // Listen for user offline
          this.socket.on('user-offline', (data) => {
            console.log('👤 User offline:', data);
            this.removeOnlineUser(data);
          });

          // Listen for new user messages
          this.socket.on('new-user-message', (data) => {
            console.log('📨 New user message:', data);
            this.handleNewUserMessage(data);
          });

          // Listen for chat messages
          this.socket.on('chat-message', (message) => {
            console.log('📨 Chat message:', message);

            // Chỉ thêm tin nhắn nếu không phải từ user (vì user messages đã được xử lý trong new-user-message)
            if (message.isAdmin) {
              this.addMessage(message);
            } else {
              console.log('📨 Skipping user chat-message (already handled by new-user-message)');
            }
          });

          // Listen for chat history
          this.socket.on('chat-history', (data) => {
            console.log('📚 Chat history received:', data);

            if (data && data.chatRoomId && data.messages) {
              console.log(`📚 Loading ${data.messages.length} messages for room:`, data.chatRoomId);
              this.messages.set(data.chatRoomId, data.messages);

              // Re-render if this is the current chat room
              if (this.currentChatRoom === data.chatRoomId) {
                this.renderMessages();
                this.scrollToBottom();
              }
            }
          });

          // Listen for admin connection confirmation
          this.socket.on('admin-connection-confirmed', (data) => {
            console.log('✅ Admin connection confirmed:', data);
          });

          // Listen for users with messages
          this.socket.on('users-with-messages', (users) => {
            console.log('📚 Users with messages:', users);

            // Add these users to online list (even if they're offline)
            users.forEach(user => {
              if (!this.onlineUsers.has(user.userId)) {
                this.addOnlineUser({
                  userId: user.userId,
                  userName: user.userName,
                  userAvatar: user.userAvatar,
                  chatRoomId: `user-${user.userId}`
                });
              }
            });
          });
        }

        bindEvents() {
          // Send message
          document.getElementById('admin-send-message').addEventListener('click', () => {
            this.sendMessage();
          });

          // Enter key to send
          document.getElementById('admin-chat-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
              this.sendMessage();
            }
          });

          // Test connection
          document.getElementById('test-connection').addEventListener('click', () => {
            this.testConnection();
          });

          // Clear chat
          document.getElementById('clear-chat').addEventListener('click', () => {
            if (confirm('Bạn có chắc muốn xóa tất cả tin nhắn?')) {
              this.clearChat();
            }
          });

          // Quick reply buttons
          document.querySelectorAll('.quick-reply-btn').forEach(btn => {
            btn.addEventListener('click', () => {
              const message = btn.dataset.message;
              document.getElementById('admin-chat-input').value = message;
              this.sendMessage();
            });
          });
        }

        testConnection() {
          console.log('🧪 Testing connection...');
          console.log('Socket connected:', this.isConnected);
          console.log('Current chat room:', this.currentChatRoom);
          console.log('Online users:', this.onlineUsers.size);
          console.log('Messages:', this.messages.size);

          if (this.socket) {
            this.socket.emit('test-admin-connection', {
              message: 'Admin connection test',
              timestamp: new Date().toISOString()
            });
            console.log('📡 Test message sent');
          }
        }

        handleNewUserMessage(data) {
          console.log('📨 Handling new user message:', data);

          // Show notification
          this.showNotification(`Tin nhắn mới từ ${data.userName}: ${data.message}`);

          // Add user to online list if not exists
          if (!this.onlineUsers.has(data.userId)) {
            this.addOnlineUser(data);
          }

          // Auto switch to user chat if no current chat
          if (!this.currentChatRoom) {
            this.switchToUserChat(data);
          }

          // Tạo message object và thêm vào chat
          const userMessage = {
            id: `msg-${Date.now()}-${Math.random()}`,
            userId: data.userId,
            userName: data.userName,
            userAvatar: data.userAvatar,
            message: data.message,
            timestamp: new Date(),
            isAdmin: false
          };

          // Thêm tin nhắn vào chat
          this.addMessage(userMessage);
          console.log('📨 User message added to chat');
        }

        addOnlineUser(data) {
          this.onlineUsers.set(data.userId, data);
          this.updateOnlineUsers();
        }

        removeOnlineUser(data) {
          this.onlineUsers.delete(data.userId);
          this.updateOnlineUsers();
        }

        updateOnlineUsers() {
          const container = document.getElementById('online-users');
          const countElement = document.getElementById('online-count');

          container.innerHTML = '';
          countElement.textContent = `${this.onlineUsers.size} người dùng`;

          this.onlineUsers.forEach((user, userId) => {
            const userElement = document.createElement('div');
            userElement.className = 'flex items-center space-x-3 p-3 rounded-xl hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer transition-all duration-200';
            userElement.dataset.userId = userId;

            const userAvatar = user.userAvatar || '';

            userElement.innerHTML = `
              <div class="flex-shrink-0">
                ${userAvatar ?
                  `<img src="${userAvatar}" alt="${user.userName}" class="w-10 h-10 rounded-full object-cover shadow-md">` :
                  `<div class="w-10 h-10 bg-gradient-to-r from-gray-400 to-gray-500 rounded-full flex items-center justify-center shadow-md">
                    <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                  </div>`
                }
              </div>
              <div class="flex-1 min-w-0">
                <div class="flex items-center space-x-2">
                  <span class="text-sm font-medium text-gray-900 dark:text-white truncate">${user.userName || 'Khách'}</span>
                  <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                </div>
                <p class="text-xs text-gray-500 dark:text-gray-400">Đang online</p>
              </div>
            `;

            // Add click event to switch to user chat
            userElement.addEventListener('click', () => {
              this.switchToUserChat(user);
            });

            container.appendChild(userElement);
          });
        }

        switchToUserChat(user) {
          const chatRoomId = `user-${user.userId}`;
          this.currentChatRoom = chatRoomId;

          console.log('🔄 Switching to user chat:', user.userName, 'Room ID:', chatRoomId);

          // Update header
          document.getElementById('current-user-name').textContent = user.userName || 'Khách';
          document.getElementById('chat-status').textContent = 'Đang chat';

          // Update avatar
          const avatarContainer = document.getElementById('current-user-avatar');
          if (user.userAvatar) {
            avatarContainer.innerHTML = `<img src="${user.userAvatar}" alt="${user.userName}" class="w-10 h-10 rounded-full object-cover">`;
          } else {
            avatarContainer.innerHTML = `
              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
              </svg>
            `;
          }

          // Join user room và request chat history
          if (this.socket) {
            this.socket.emit('join-user-room', { chatRoomId });
            console.log('📡 Joined user room:', chatRoomId);

            // Request chat history for this room
            this.socket.emit('request-chat-history', { chatRoomId });
            console.log('📚 Requested chat history for room:', chatRoomId);
          }

          // Load messages for this user (from local cache first)
          this.renderMessages();
          this.scrollToBottom();
        }

        addMessage(message) {
          let chatRoomId;

          if (message.isAdmin) {
            chatRoomId = this.currentChatRoom;
          } else {
            chatRoomId = `user-${message.userId}`;
          }

          console.log('➕ Adding message to room:', chatRoomId, 'Message:', message);

          if (!this.messages.has(chatRoomId)) {
            this.messages.set(chatRoomId, []);
          }

          const userMessages = this.messages.get(chatRoomId);
          userMessages.push(message);
          this.messages.set(chatRoomId, userMessages);

          // Auto switch to user chat if no current chat and message is from user
            if (!message.isAdmin && !this.currentChatRoom) {
              const userData = {
                userId: message.userId,
                userName: message.userName,
                userAvatar: message.userAvatar,
                chatRoomId: chatRoomId
              };
              this.switchToUserChat(userData);
            }

          // Render messages if viewing this chat room
          if (this.currentChatRoom === chatRoomId) {
            this.renderMessages();
            this.scrollToBottom();
          }
        }

        renderMessages() {
          const container = document.getElementById('chat-messages');
          container.innerHTML = '';

          if (!this.currentChatRoom) {
            container.innerHTML = `
              <div class="flex items-center justify-center h-full">
                <div class="text-center">
                  <div class="w-16 h-16 bg-gray-200 dark:bg-gray-600 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                    </svg>
                  </div>
                  <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">Chọn người dùng để bắt đầu chat</h3>
                  <p class="text-gray-500 dark:text-gray-400">Click vào một người dùng trong danh sách bên trái</p>
                </div>
              </div>
            `;
            return;
          }

          const userMessages = this.messages.get(this.currentChatRoom) || [];
          userMessages.forEach(message => {
            const messageElement = this.createMessageElement(message);
            container.appendChild(messageElement);
          });
        }

        createMessageElement(message) {
          const messageDiv = document.createElement('div');
          messageDiv.className = 'flex space-x-3';

          if (message.isAdmin) {
            // Admin message (right side)
            messageDiv.innerHTML = `
              <div class="flex-1"></div>
              <div class="max-w-xs lg:max-w-md">
                <div class="bg-blue-600 text-white p-3 rounded-lg">
                  <p class="text-sm">${this.escapeHtml(message.message)}</p>
                </div>
                <div class="text-xs text-gray-500 mt-1 text-right">
                  ${this.formatTime(message.timestamp)}
                </div>
              </div>
            `;
          } else {
            // User message (left side)
            messageDiv.innerHTML = `
              <div class="max-w-xs lg:max-w-md">
                <div class="bg-white dark:bg-gray-600 p-3 rounded-lg border border-gray-200 dark:border-gray-500">
                  <p class="text-sm text-gray-900 dark:text-white">${this.escapeHtml(message.message)}</p>
                </div>
                <div class="text-xs text-gray-500 mt-1">
                  ${message.userName || 'Khách'} • ${this.formatTime(message.timestamp)}
                </div>
              </div>
              <div class="flex-1"></div>
            `;
          }

          return messageDiv;
        }

        sendMessage() {
          const input = document.getElementById('admin-chat-input');
          const message = input.value.trim();

          console.log('📤 Sending message:', message);

          if (message && this.socket && this.currentChatRoom) {
            const token = this.getCookie('accessToken');
            const targetUserId = this.currentChatRoom.replace('user-', '');

            console.log('🎯 Target user ID:', targetUserId);

            // Send message
            this.socket.emit('send-message', {
              message,
              token,
              targetUserId: targetUserId
            });

            // Clear input immediately
            input.value = '';

            // Không thêm tin nhắn vào UI ngay lập tức
            // Đợi server gửi lại chat-message event
            console.log('📤 Message sent - waiting for server confirmation');
          } else if (!this.currentChatRoom) {
            alert('Vui lòng chọn một người dùng để chat');
          } else if (!this.socket) {
            alert('Không thể kết nối đến server');
          }
        }

        clearChat() {
          if (this.currentChatRoom) {
            this.messages.set(this.currentChatRoom, []);
            this.renderMessages();
          }
        }

        showNotification(message) {
          // Create notification
          const notification = document.createElement('div');
          notification.className = 'fixed top-4 right-4 bg-blue-600 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full';
          notification.textContent = message;

          document.body.appendChild(notification);

          // Animate in
          setTimeout(() => {
            notification.classList.remove('translate-x-full');
          }, 100);

          // Remove after 5 seconds
          setTimeout(() => {
            notification.classList.add('translate-x-full');
            setTimeout(() => {
              document.body.removeChild(notification);
            }, 300);
          }, 5000);
        }

        scrollToBottom() {
          const container = document.getElementById('chat-messages');
          container.scrollTop = container.scrollHeight;
        }

        formatTime(timestamp) {
          const date = new Date(timestamp);
          return date.toLocaleTimeString('vi-VN', {
            hour: '2-digit',
            minute: '2-digit'
          });
        }

        escapeHtml(text) {
          const div = document.createElement('div');
          div.textContent = text;
          return div.innerHTML;
        }

        getCookie(name) {
          const value = `; ${document.cookie}`;
          const parts = value.split(`; ${name}=`);
          if (parts.length === 2) return parts.pop().split(';').shift();
        }
      }

      // Initialize admin chat when page loads
      document.addEventListener('DOMContentLoaded', () => {
        new AdminChat();
      });
    </script>
  </body>
</html>
