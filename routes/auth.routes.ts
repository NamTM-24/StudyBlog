import express from 'express';
import { AuthService } from '../services/auth.service.js';
import { UserService } from '../services/user.service.js';
import { PasswordResetService } from '../services/password-reset.service.js';
import { jwtSecret } from '../utils/jwt.utils.js';
import jwt from 'jsonwebtoken';

const router = express.Router();

// Route: Trang ƒëƒÉng nh·∫≠p
router.get('/login', (req, res) => {
    res.render('login');
});

// Route: X·ª≠ l√Ω ƒëƒÉng nh·∫≠p
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.status(400).render('login', { error: 'Email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc' });
    }

    try {
        const result = await AuthService.login(email, password);

        res.cookie('accessToken', result.accessToken, {
            httpOnly: false,
            secure: process.env.NODE_ENV === 'production',
            maxAge: 24 * 60 * 60 * 1000,
        });

        res.cookie('refreshToken', result.refreshToken, {
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production',
            maxAge: 7 * 24 * 60 * 60 * 1000,
        });

        res.redirect('/home');
    } catch (error) {
        console.error(error);
        res.status(500).render('login', { error: 'L·ªói server khi ƒëƒÉng nh·∫≠p' });
    }
});

// Route: Trang ƒëƒÉng k√Ω
router.get('/register', (req, res) => {
    res.render('dangky');
});

// Route: X·ª≠ l√Ω ƒëƒÉng k√Ω
router.post('/register', async (req, res) => {
    const { email, name, password, confirmPassword } = req.body;

    if (!email || !name || !password || !confirmPassword) {
        return res.status(400).render('dangky', { error: 'Email, t√™n, m·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc' });
    }

    if (password !== confirmPassword) {
        return res.status(400).render('dangky', { error: 'M·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp' });
    }

    if (password.length < 6) {
        return res.status(400).render('dangky', { error: 'M·∫≠t kh·∫©u ph·∫£i √≠t nh·∫•t 6 k√Ω t·ª±' });
    }

    try {
        await AuthService.register(email, name, password);
        res.redirect('/login');
    } catch (error) {
        console.error(error);
        res.status(400).render('dangky', { error: 'L·ªói ƒëƒÉng k√Ω: Email ƒë√£ t·ªìn t·∫°i ho·∫∑c l·ªói server' });
    }
});

// Route: Trang qu√™n m·∫≠t kh·∫©u
router.get('/forgot-password', (req, res) => {
    res.render('forgot-password');
});

// Route: X·ª≠ l√Ω g·ª≠i email reset password
router.post('/forgot-password', async (req, res) => {
    const { email } = req.body;

    if (!email) {
        return res.status(400).render('forgot-password', { error: 'Email l√† b·∫Øt bu·ªôc' });
    }

    try {
        const result = await PasswordResetService.createPasswordReset(email);

        if (result.success) {
            res.render('forgot-password', {
                success: true,
                message: result.message,
                showCodeForm: true,
                token: result.token
            });
        } else {
            res.render('forgot-password', { error: result.message });
        }
    } catch (error) {
        console.error('Error in forgot-password POST:', error);
        res.render('forgot-password', { error: 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.' });
    }
});

// Route: Trang x√°c nh·∫≠n m√£
router.get('/verify-code', (req, res) => {
    const { token } = req.query;
    if (!token) {
        return res.redirect('/forgot-password');
    }
    res.render('verify-code', { token });
});

// Route: X·ª≠ l√Ω x√°c nh·∫≠n m√£
router.post('/verify-code', async (req, res) => {
    const { token, code } = req.body;

    console.log('üîç Verify code request:', { token, code });

    if (!token || !code) {
        console.log('‚ùå Missing token or code');
        return res.status(400).render('verify-code', {
            error: 'Token v√† m√£ x√°c nh·∫≠n l√† b·∫Øt bu·ªôc',
            token
        });
    }

    try {
        const result = await PasswordResetService.verifyResetCode(token, code);
        console.log('üîç Verify result:', result);

        if (result.success) {
            // Khi x√°c nh·∫≠n m√£ th√†nh c√¥ng, render tr·ª±c ti·∫øp trang reset password
            console.log('‚úÖ Code verified successfully, rendering reset-password page');
            return res.render('reset-password', {
                token,
                success: false,
                message: 'M√£ x√°c nh·∫≠n h·ª£p l·ªá! Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi c·ªßa b·∫°n.'
            });
        } else {
            console.log('‚ùå Code verification failed:', result.message);
            return res.render('verify-code', {
                error: result.message,
                token
            });
        }
    } catch (error) {
        console.error('‚ùå Error in verify-code POST:', error);
        return res.render('verify-code', {
            error: 'C√≥ l·ªói x·∫£y ra khi x√°c th·ª±c m√£',
            token
        });
    }
});

// Route: Trang ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
router.get('/reset-password', (req, res) => {
    const { token } = req.query;
    console.log('üîç Reset password GET request, token:', token ? 'provided' : 'none');

    if (!token) {
        console.log('‚ùå No token provided, redirecting to forgot-password');
        return res.redirect('/forgot-password');
    }

    console.log('‚úÖ Rendering reset-password page with token');
    res.render('reset-password', { token });
});

// Route: X·ª≠ l√Ω ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
router.post('/reset-password', async (req, res) => {
    const { token, newPassword, confirmPassword } = req.body;

    if (!token || !newPassword || !confirmPassword) {
        return res.status(400).render('reset-password', {
            error: 'Token v√† m·∫≠t kh·∫©u m·ªõi l√† b·∫Øt bu·ªôc',
            token
        });
    }

    if (newPassword !== confirmPassword) {
        return res.status(400).render('reset-password', {
            error: 'M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp',
            token
        });
    }

    if (newPassword.length < 6) {
        return res.status(400).render('reset-password', {
            error: 'M·∫≠t kh·∫©u ph·∫£i √≠t nh·∫•t 6 k√Ω t·ª±',
            token
        });
    }

    try {
        const result = await PasswordResetService.resetPassword(token, newPassword);

        if (result.success) {
            res.render('reset-password', {
                success: true,
                message: result.message
            });
        } else {
            res.render('reset-password', {
                error: result.message,
                token
            });
        }
    } catch (error) {
        console.error('Error in reset-password POST:', error);
        res.render('reset-password', {
            error: 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u',
            token
        });
    }
});

// Route: ƒêƒÉng xu·∫•t
router.get('/logout', (req, res) => {
    res.clearCookie('accessToken');
    res.clearCookie('refreshToken');
    res.redirect('/login');
});

export default router;
